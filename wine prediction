{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled24.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPF2ZXwco4C/1NhlfbiDNX8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harishankaryadav/Deathtroll/blob/master/wine%20prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "rALvD3qO8sme"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wine_dataset=pd.read_csv('/content/WineQT.csv')"
      ],
      "metadata": {
        "id": "DWfEEhNJ82vX"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "wine_dataset.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-SPozpgL9Qy5",
        "outputId": "87e5b70e-905a-460f-aaba-d64432d57aa1"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1143, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wine_dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "RzO_qHeO9Wpt",
        "outputId": "d1eaa029-6b91-45c8-8dc4-b53fb2c536f4"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
              "0            7.4              0.70         0.00             1.9      0.076   \n",
              "1            7.8              0.88         0.00             2.6      0.098   \n",
              "2            7.8              0.76         0.04             2.3      0.092   \n",
              "3           11.2              0.28         0.56             1.9      0.075   \n",
              "4            7.4              0.70         0.00             1.9      0.076   \n",
              "\n",
              "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
              "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
              "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
              "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
              "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
              "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
              "\n",
              "   alcohol  quality  \n",
              "0      9.4        5  \n",
              "1      9.8        5  \n",
              "2      9.8        5  \n",
              "3      9.8        6  \n",
              "4      9.4        5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4555cbbc-823b-450f-acb0-44a4f835992b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.9968</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.9970</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.9980</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4555cbbc-823b-450f-acb0-44a4f835992b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4555cbbc-823b-450f-acb0-44a4f835992b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4555cbbc-823b-450f-acb0-44a4f835992b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking for missing values\n",
        "wine_dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y5ck6xxL9axX",
        "outputId": "e4c43502-b6b3-4b62-92e1-7ef5c3a093e9"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "fixed acidity           0\n",
              "volatile acidity        0\n",
              "citric acid             0\n",
              "residual sugar          0\n",
              "chlorides               0\n",
              "free sulfur dioxide     0\n",
              "total sulfur dioxide    0\n",
              "density                 0\n",
              "pH                      0\n",
              "sulphates               0\n",
              "alcohol                 0\n",
              "quality                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#statistical measure of the dataset\n",
        "wine_dataset.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "SzTbcZQy9e21",
        "outputId": "8520b0ac-d979-4b40-a24a-d113c272c957"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       fixed acidity  volatile acidity  citric acid  residual sugar  \\\n",
              "count    1143.000000       1143.000000  1143.000000     1143.000000   \n",
              "mean        8.311111          0.531339     0.268364        2.532152   \n",
              "std         1.747595          0.179633     0.196686        1.355917   \n",
              "min         4.600000          0.120000     0.000000        0.900000   \n",
              "25%         7.100000          0.392500     0.090000        1.900000   \n",
              "50%         7.900000          0.520000     0.250000        2.200000   \n",
              "75%         9.100000          0.640000     0.420000        2.600000   \n",
              "max        15.900000          1.580000     1.000000       15.500000   \n",
              "\n",
              "         chlorides  free sulfur dioxide  total sulfur dioxide      density  \\\n",
              "count  1143.000000          1143.000000           1143.000000  1143.000000   \n",
              "mean      0.086933            15.615486             45.914698     0.996730   \n",
              "std       0.047267            10.250486             32.782130     0.001925   \n",
              "min       0.012000             1.000000              6.000000     0.990070   \n",
              "25%       0.070000             7.000000             21.000000     0.995570   \n",
              "50%       0.079000            13.000000             37.000000     0.996680   \n",
              "75%       0.090000            21.000000             61.000000     0.997845   \n",
              "max       0.611000            68.000000            289.000000     1.003690   \n",
              "\n",
              "                pH    sulphates      alcohol      quality  \n",
              "count  1143.000000  1143.000000  1143.000000  1143.000000  \n",
              "mean      3.311015     0.657708    10.442111     5.657043  \n",
              "std       0.156664     0.170399     1.082196     0.805824  \n",
              "min       2.740000     0.330000     8.400000     3.000000  \n",
              "25%       3.205000     0.550000     9.500000     5.000000  \n",
              "50%       3.310000     0.620000    10.200000     6.000000  \n",
              "75%       3.400000     0.730000    11.100000     6.000000  \n",
              "max       4.010000     2.000000    14.900000     8.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-84cdadee-4853-4e8f-a527-b0e68727db8c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "      <td>1143.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>8.311111</td>\n",
              "      <td>0.531339</td>\n",
              "      <td>0.268364</td>\n",
              "      <td>2.532152</td>\n",
              "      <td>0.086933</td>\n",
              "      <td>15.615486</td>\n",
              "      <td>45.914698</td>\n",
              "      <td>0.996730</td>\n",
              "      <td>3.311015</td>\n",
              "      <td>0.657708</td>\n",
              "      <td>10.442111</td>\n",
              "      <td>5.657043</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.747595</td>\n",
              "      <td>0.179633</td>\n",
              "      <td>0.196686</td>\n",
              "      <td>1.355917</td>\n",
              "      <td>0.047267</td>\n",
              "      <td>10.250486</td>\n",
              "      <td>32.782130</td>\n",
              "      <td>0.001925</td>\n",
              "      <td>0.156664</td>\n",
              "      <td>0.170399</td>\n",
              "      <td>1.082196</td>\n",
              "      <td>0.805824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>0.120000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>0.012000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.990070</td>\n",
              "      <td>2.740000</td>\n",
              "      <td>0.330000</td>\n",
              "      <td>8.400000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.100000</td>\n",
              "      <td>0.392500</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>1.900000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>0.995570</td>\n",
              "      <td>3.205000</td>\n",
              "      <td>0.550000</td>\n",
              "      <td>9.500000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.900000</td>\n",
              "      <td>0.520000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>2.200000</td>\n",
              "      <td>0.079000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>0.996680</td>\n",
              "      <td>3.310000</td>\n",
              "      <td>0.620000</td>\n",
              "      <td>10.200000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>9.100000</td>\n",
              "      <td>0.640000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>2.600000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>61.000000</td>\n",
              "      <td>0.997845</td>\n",
              "      <td>3.400000</td>\n",
              "      <td>0.730000</td>\n",
              "      <td>11.100000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>15.900000</td>\n",
              "      <td>1.580000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>15.500000</td>\n",
              "      <td>0.611000</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>289.000000</td>\n",
              "      <td>1.003690</td>\n",
              "      <td>4.010000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>14.900000</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84cdadee-4853-4e8f-a527-b0e68727db8c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-84cdadee-4853-4e8f-a527-b0e68727db8c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-84cdadee-4853-4e8f-a527-b0e68727db8c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#number of values for each quality\n",
        "sns.catplot(x='quality', data = wine_dataset, kind ='count')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "JM2X0xMl9jt5",
        "outputId": "aaa25fee-efb3-4504-a228-80cd88e170d2"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7ff2f0385d50>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#volatile acidity vs quality\n",
        "plot = plt.figure(figsize=(5,5))\n",
        "sns.barplot(x='quality',y= 'volatile acidity', data = wine_dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "QP8syNJx9uM1",
        "outputId": "bd11af6f-f522-45db-f4a3-bca57ace1f5c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff2ed2b0d50>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#citric acid vs quality\n",
        "plot = plt.figure(figsize=(5,5))\n",
        "sns.barplot(x='quality',y= 'citric acid', data = wine_dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "Gb-l6p8092e9",
        "outputId": "63c97cf3-e8fc-4a34-a352-c607156ae7f3"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff2ed2a6d50>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "correlation = wine_dataset.corr()"
      ],
      "metadata": {
        "id": "_7tWoB5h99Ai"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#constructing a heatmap to understand the correlation between the columns\n",
        "plt.figure(figsize=(10,10))\n",
        "sns.heatmap(correlation, cbar=True, square=True, fmt='.1f',annot=True, annot_kws={'size':8}, cmap = 'Blues')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 648
        },
        "id": "YFyZKQd4-DYr",
        "outputId": "b36611c8-3075-4972-f8dc-6955819cabd9"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff2ecd08810>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#seprate the data and label\n",
        "x = wine_dataset.drop('quality', axis =1)"
      ],
      "metadata": {
        "id": "jQL-GWgf-KOA"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bhy00nPr-SKn",
        "outputId": "3c311b2a-0e69-404e-b38c-db49dbc667a5"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
            "0               7.4             0.700         0.00             1.9      0.076   \n",
            "1               7.8             0.880         0.00             2.6      0.098   \n",
            "2               7.8             0.760         0.04             2.3      0.092   \n",
            "3              11.2             0.280         0.56             1.9      0.075   \n",
            "4               7.4             0.700         0.00             1.9      0.076   \n",
            "...             ...               ...          ...             ...        ...   \n",
            "1138            6.3             0.510         0.13             2.3      0.076   \n",
            "1139            6.8             0.620         0.08             1.9      0.068   \n",
            "1140            6.2             0.600         0.08             2.0      0.090   \n",
            "1141            5.9             0.550         0.10             2.2      0.062   \n",
            "1142            5.9             0.645         0.12             2.0      0.075   \n",
            "\n",
            "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
            "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
            "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
            "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
            "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
            "4                    11.0                  34.0  0.99780  3.51       0.56   \n",
            "...                   ...                   ...      ...   ...        ...   \n",
            "1138                 29.0                  40.0  0.99574  3.42       0.75   \n",
            "1139                 28.0                  38.0  0.99651  3.42       0.82   \n",
            "1140                 32.0                  44.0  0.99490  3.45       0.58   \n",
            "1141                 39.0                  51.0  0.99512  3.52       0.76   \n",
            "1142                 32.0                  44.0  0.99547  3.57       0.71   \n",
            "\n",
            "      alcohol  \n",
            "0         9.4  \n",
            "1         9.8  \n",
            "2         9.8  \n",
            "3         9.8  \n",
            "4         9.4  \n",
            "...       ...  \n",
            "1138     11.0  \n",
            "1139      9.5  \n",
            "1140     10.5  \n",
            "1141     11.2  \n",
            "1142     10.2  \n",
            "\n",
            "[1143 rows x 11 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y = wine_dataset['quality']. apply(lambda y_value: 1 if y_value>=7 else 0)"
      ],
      "metadata": {
        "id": "_CSxw7pd-WrH"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yk2grdvX-dKL",
        "outputId": "3e908452-9c53-4c8e-e86f-14eb8fccdfe3"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       0\n",
            "1       0\n",
            "2       0\n",
            "3       0\n",
            "4       0\n",
            "       ..\n",
            "1138    0\n",
            "1139    0\n",
            "1140    0\n",
            "1141    0\n",
            "1142    0\n",
            "Name: quality, Length: 1143, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, Y_train, Y_test = train_test_split(x, Y, test_size=0.2, random_state=2)"
      ],
      "metadata": {
        "id": "zSG2bGve-f1I"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(Y.shape, Y_train.shape, Y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KXpivcHk-lck",
        "outputId": "59eec352-30c7-4b6f-99f5-fef3e09675af"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1143,) (914,) (229,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = RandomForestClassifier()"
      ],
      "metadata": {
        "id": "MLYogG3_-oZs"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(x_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ravCeQy7-sUW",
        "outputId": "e2b55ac6-dc26-4f3c-efac-507e477be495"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier()"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#accuracy on test data\n",
        "x_test_prediction = model.predict(x_test)\n",
        "test_data_accuracy = accuracy_score(x_test_prediction,Y_test)"
      ],
      "metadata": {
        "id": "9zlfz8-7-wZj"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('Accuracy :', test_data_accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nZyOoj7s-0bk",
        "outputId": "0d2fcb7f-f0ef-4b9e-e461-23ee1d50663f"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy : 0.9126637554585153\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "input_data = (7.8,0.58,0.02,2,0.073,9,18,0.9968,3.36,0.57,9.5)\n",
        "\n",
        "#changing the input data to a numpy array\n",
        "input_data_as_numpy_array = np.asarray(input_data)\n",
        "\n",
        "#reshape the data as we are predicting the label for only one instance\n",
        "input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n",
        "prediction = model.predict(input_data_reshaped)\n",
        "print(prediction)\n",
        "if(prediction[0]==1):\n",
        "  print('Good Quality Wine')\n",
        "else:\n",
        "  print('Bad Quality Wine') "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OujtzFqA-4Ms",
        "outputId": "be1f2b0c-ce15-4b8f-d826-9b8c7e6e599e"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1]\n",
            "Good Quality Wine\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  \"X does not have valid feature names, but\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "xt6JPCTw_Qu_"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}